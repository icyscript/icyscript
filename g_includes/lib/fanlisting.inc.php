<?php 
// Abstract Fanlisting class.
if ('fanlisting.inc.php' == basename($_SERVER['SCRIPT_FILENAME']))
	die ('Security Error.');
	
require_once('notify.inc.php');
require_once('affiliate.inc.php');
require_once('news.inc.php');

class Fanlisting {
	 function FanListing(&$sql, $table_name) {
		$this->sql			= &$sql;
		$this->table_name	= (string)$table_name;
		$this->settings = array();

		$this->sql->query('SELECT * FROM ' . $this->table_name . '_settings');
		while ($row = $this->sql->fetch_array()) {
			$this->settings[$row['setting']] = $row['value'];
		}

		$this->settings['site_url'] 		= preg_replace('/^(http:\/\/)?(([^\/])(.)*([^\/]))(\/)?$/i', 'http://\\2/', $this->settings['site_url']);
		$this->settings['mail_signature']	= "\n\n\n\n\n" . 'This email was automatically generated by phpFanList ' . $this->settings['version'] . "\n" . 'You can find phpFanList on http://www.phpfanlist.com/';
		$this->settings['mail_headers']		= 'From: "' . $this->settings['owner_name'] . '" <' . $this->settings['owner_mail'] . "> \r\n" . 'Reply-to: "' . $this->settings['owner_name'] . '" <' . $this->settings['owner_mail'] . ">\r\n" . 'Return-Path: <' . $this->settings['owner_mail'] . ">\r\n" . 'Sender: <' . $this->settings['owner_mail'] . ">\r\n";
		
		switch ($this->settings['list_type']) {
			case '0':
				$this->settings['list_type_name'] = 'fanlisting';
				break;
			case '1':
				$this->settings['list_type_name'] = 'clique';
				break;
			case '2':
				$this->settings['list_type_name'] = 'namelisting';
				break;
			case '3':
				$this->settings['list_type_name'] = 'anime fanlisting';
				break;
			case '4':
				$this->settings['list_type_name'] = 'listing';
				break;
			case '5':
				$this->settings['list_type_name'] = 'numberlisting';
				break;
			default:
				$this->settings['list_type_name'] = '';
				break;
		}
		
		if (class_exists('Notify')) {
			$this->notify_handler = &new Notify($this->settings);
		}
		if (class_exists('AffiliateHandler')) {
			$this->affiliate_handler = &new AffiliateHandler($this->sql, $this->table_name);
		}
		if (class_exists('NewsHandler')) {
			$this->news_handler = &new NewsHandler($this->sql, $this->table_name);
		}
		
	}
	//private
	var $sql = NULL;
	var $table_name = NULL;
	var $notify_handler = NULL;
	var $affiliate_handler = NULL;
	var $news_handler = NULL;

	// public
	var $settings = NULL;
	
	// Gets a member object specified by the ID.
	// If the members is a temporary member (join, update, delete) and the mid (member id) is set (update, delete)
	// 		Then the actual member will be loaded too in the $member->extra['member'] property
	//		Name will be autoinicapped (if setting says so), the email auto lowercased.
	// Returns NULL on error (i.e. invalid id)
	function GetMember($id, $is_temp = false) {
		if ((!is_null($id)) && ctype_digit((string)$id) && ($id > 0)) {
			$member = &new Member();
			if ($is_temp) {
				$this->sql->query('SELECT * FROM ' . $this->table_name . '_temp WHERE tempid = ' . $id);
			} else {
				$this->sql->query('SELECT *, UNIX_TIMESTAMP(dateofadd) as dateadd FROM ' . $this->table_name . ' WHERE id = ' . $id);
			}
			if ($this->sql->num_rows() == 1) {
				$row = $this->sql->fetch_array();
				$this->FillMember($member, $row, $is_temp);
				return $member;
			}
			else return NULL;
		}
		else return NULL; // Not a number as Id
	}
	
	// Gets memberlist.
	// Possible lists:
	// 		Default is memberlist
	// 		'join': members requesting join
	// 		'update': members requesting update
	// 		'delete': members requesting delete
	// 		'lastx': gives last x members
	function MemberList($listname='', $where=NULL, $order=NULL) {
		$members = array();
		switch($listname) {
			case 'join':
				$members = $this->GetList(true, 'action = 0' . (!is_null($where) ? ' AND ' . $where : ''));
				break;
			case 'update':
				$members = $this->GetList(true, 'action = 1 AND mid IS NOT NULL' . (!is_null($where) ? ' AND ' . $where : ''));
				break;
			case 'delete':
				$members = $this->GetList(true, 'action = 2 AND mid IS NOT NULL' . (!is_null($where) ? ' AND ' . $where : ''));
				break;
			default:
				$members = $this->GetList(false, $where, $order);
				break;
		}
		return $members;
	}
	
	// Checks if a certain property is required ($item = string) --> returns true or false
	// Checks if items in an array are required ($item = array, mostlikely $_POST) --> returns string or NULL
	// Or if the all required fields are filled in ($item = member) --> returns string or NULL
	function CheckRequired($item) {
		$fields_required = array('name', 'mail','country');

		if ($this->settings['ask_url'] == 2) { array_push($fields_required, 'url'); }
		if (($this->settings['ask_rules'] == 2) && ($this->settings['rules_question'] != '')) { array_push($fields_required, 'rules'); }
		if (($this->settings['ask_custom'] == 2) && ($this->settings['custom_field_name'] != '')) { array_push($fields_required, 'custom'); }
		
		if (is_string($item)) {
			return in_array(strtolower($item), $fields_required);
		} else if(is_array($item)) {
			$result = '';
			while (list ($key, $val) = each($item)) {
				if (in_array($key, $fields_required)) {
					if (is_null($val) || trim($val) == '') {
						$result .= $key . "must be filled in!\n";
					}
				}
			}
			return ($result == '') ? NULL : $result;
		} else if (is_object($item) && is_a($item, 'Member')) { // DEPRECIATED IN PHP 5
			$result = '';
			if (in_array('name', $fields_required) && is_empty($item->name)) { $result .= "The name must be filled in.\n"; }
			if (in_array('url', $fields_required) && is_empty($item->url)) { $result .= "The url must be filled in.\n"; }
			if (in_array('mail', $fields_required) && is_empty($item->mail)) { $result .= "The mail must be filled in.\n"; }
			if (in_array('country', $fields_required) && is_empty($item->country)) { $result .= "The country must be filled in.\n"; }
			if (in_array('custom', $fields_required) && is_empty($item->custom)) { $result .= "The " . $this->settings['custom_field_name'] . " must be filled in.\n"; }
			if (in_array('rules', $fields_required) && (!isset($item->extra['rules']) || is_empty($item->extra['rules']))) { $result .= "The rules must be filled in.\n"; }
			if (in_array('comment', $fields_required) && (!isset($item->extra['comment']) || is_empty($item->extra['comment']))) { $result .= "The comment must be filled in.\n"; }
			return ($result == '') ? NULL : $result;
		} else return false;
	}
	
	// Gets Afffiliates
	function Affiliates($category = NULL, $order='name') {
		if (!is_null($this->affiliate_handler)) {
			return $this->affiliate_handler->GetAffiliates($category, $order);
		} else return array();
	}
	
	// Gets News items
	function News($limit=NULL, $order=NULL) {
		if (!is_null($this->news_handler)) {
			return $this->news_handler->GetNews($limit, $order);
		} else return array();
	}
	
	// Get soms stats
	function GetStats() {
		$stats = array('member_count'=>0, 'member_pending_count'=>0, 'member_update_count'=>0, 'member_delete_count'=>0,  'last_memberupdate'=>'N/A', 'last_X'=>'N/A', 'lastnew_X'=>'N/A');
		
		$this->sql->query('SELECT count(1) AS num, UNIX_TIMESTAMP(MAX(lastupdate)) AS unixlastdate, UNIX_TIMESTAMP(MAX(dateofadd)) AS unixlastnewdate, MAX(lastupdate) AS lastdate, MAX(dateofadd) AS lastdateadd FROM ' . $this->table_name);
		if ($this->sql->query_ok()) {
			$row = $this->sql->fetch_array();
			$stats['member_count'] = $row['num'];
			$stats['last_memberupdate'] = date($this->settings['date_format'], $row['unixlastdate'] + ($this->settings['timediff'] * 3600));
			$stats['last_membernew'] = date($this->settings['date_format'], $row['unixlastnewdate'] + ($this->settings['timediff'] * 3600));
			$lastupdate = $row['lastdate'];
			$lastnew = $row['lastdateadd'];
		}
		$this->sql->query('SELECT count(1) AS num, action FROM ' . $this->table_name . '_temp GROUP BY action');
		if ($this->sql->query_ok()) {
			$temp_count = array();
			while($row = $this->sql->fetch_array()) {
				$temp_count[$row['action']] = $row['num'];
			}
			if (isset($temp_count['0'])) { $stats['member_pending_count'] = $temp_count['0']; }
			if (isset($temp_count['1'])) { $stats['member_update_count'] = $temp_count['1']; }
			if (isset($temp_count['2'])) { $stats['member_delete_count'] = $temp_count['2']; }
		}
		if (isset($lastupdate)) {
			$lastmembers = $this->GetList(false, 'lastupdate=\'' . $lastupdate . '\'', 'lastupdate DESC, name', (int)$this->settings['lastx']);
		} else $lastmembers = array();
		if (count($lastmembers) > 0) {
			$stats['last_X'] = array();
			foreach ($lastmembers as $member) {
				array_push($stats['last_X'], ($this->settings['show_url'] && !is_null($member->url)) ? '<a href="' . htmlentities($member->url, ENT_QUOTES, 'UTF-8') . '">' . htmlentities($member->name, ENT_QUOTES, 'UTF-8') . '</a>' : htmlentities($member->name, ENT_QUOTES, 'UTF-8'));
			}
			$stats['last_X'] = implode(', ', $stats['last_X']);
		}
		if (isset($lastnew)) {
			$lastnewmembers = $this->GetList(false, 'dateofadd=\'' . $lastnew . '\'', 'dateofadd DESC, name', (int)$this->settings['lastx']);
		} else $lastnewmembers = array();
		if (count($lastnewmembers) > 0) {
			$stats['lastnew_X'] = array();
			foreach ($lastnewmembers as $member) {
				array_push($stats['lastnew_X'], ($this->settings['show_url'] && !is_null($member->url)) ? '<a href="' . htmlentities($member->url, ENT_QUOTES, 'UTF-8') . '">' . htmlentities($member->name, ENT_QUOTES, 'UTF-8') . '</a>' : htmlentities($member->name, ENT_QUOTES, 'UTF-8'));
			}
			$stats['lastnew_X'] = implode(', ', $stats['lastnew_X']);
		}
		
		return $stats;
	}

   /*
    *  Private Methods
    *  *************** 
	*  Private methods are not supposed to be used by code other than the class itself! So DON'T
	*/
	// ** PRIVATE METHOD **
	// Checks if a certain mail address already exists.
	// Has an optional memberId, when specified, ignores that member.
	// Returns TRUE when mail address exists, FALSE when it doesn't.
	function MailExists($mail, $memberid=NULL) {
		$query = 'SELECT count(1) as num FROM ' . $this->table_name . ' WHERE mail = ' . $this->sql->safe_value($mail, true);
		if (!is_null($memberid) && ctype_digit((string)$memberid) && ($memberid > 0)) {
			$query .= ' AND id <> ' . $memberid;
		}
		$this->sql->query($query);
		if ($this->sql->num_rows() == 1) {
			$row = $this->sql->fetch_array();
			return ($row['num'] >= 1);
		} else return false;
	}
		
	// ** PRIVATE METHOD **
	// Get list of members (temporary or not)
	// Returns an array of member objects (if request failed, empty array)
	function GetList($is_temp=false, $where=NULL, $order=NULL, $amount=0) {
		if ($is_temp) {
			$query = 'SELECT * FROM ' . $this->table_name . '_temp';
		} else {
			$query = 'SELECT *, UNIX_TIMESTAMP(dateofadd) as dateadd FROM ' . $this->table_name;
		}
		if (!is_null($where)) {
			$query .= ' WHERE ' . $where;
		}
		if (!is_null($order) && ($order != '')) {
			if ($order == 'date') { $order = 'dateofadd'; }
			$query .= ' ORDER BY ' . $order;
		} else {
			$query .= ' ORDER BY ' . (($is_temp) ? 'tempid' : 'id');
		}
		if ($amount > 0) {
			$query .= ' LIMIT ' . $amount;
		}
		$this->sql->query($query);
		$members=array();
		if ($this->sql->query_ok()) {
			$temp_rows=array();
			while($row=$this->sql->fetch_array()) {
				array_push($temp_rows, $row);
			} // Double loop is required because when member is temp, FillMember uses same resource to fetch details.
			foreach($temp_rows as $row) {
				$member = &new Member();
				$this->FillMember($member, $row, $is_temp);
				array_push($members, $member);
			}
		}
		return $members;
	}
	
	// ** PRIVATE METHOD **
	// Fills a member object from a specified record.
	// Auto-inicaps when setting is set (only for temporary users).
	// Lowercases email address.
	// If member is temporary member, tries to get full member info as well. (Note extra query!)
	// !! Doesn't return anything, just fills in the member specified.
	function FillMember(&$member, $record, $is_temp = false) {
		$member->name = $record['name'];
		$member->country = $record['country'];
		$member->mail = $record['mail'];
		$member->url = ($record['url'] == '0') ? false : $record['url'];
		$member->custom = $record['custom'];
		$member->showmail = $record['showmail'];
		$member->dateadd = $record['dateadd'] + ($this->settings['timediff'] * 3600);
		if ($is_temp) {
			$member->tempid = $record['tempid'];
			if (!is_null($member->name) && $this->settings['autoinicap'] && (function_exists('inicap'))) {
				$member->name = inicap($member->name);
			}
			if (!is_null($record['IP'])) { $member->extra['ip'] = $record['IP']; }
			if (!is_null($record['comment'])) { $member->extra['comment'] = $record['comment']; }
			if (!is_null($record['rules'])) { $member->extra['rules'] = $record['rules']; }
			if (!is_null($record['mid'])) { $member->extra['mid'] = $record['mid']; } // Should not be used anywhere, it's just to represent value in DB.
			$member->extra['member'] = (isset($member->extra['mid'])) ? $this->GetMember($member->extra['mid']) : NULL;
			if (isset($member->extra['member'])) {
				$member->id = &$member->extra['member']->id; // Link 2 Ids to eachother.
			}
			$member->extra['action'] = $record['action'];
		} else {
			$member->id = $record['id'];
		}
	}
	
	// ** PRIVATE METHOD **
	// Cleans the member-info a bit, before it goes into the database.
	// Strips tags & trims
	function Clean4DB(&$member) {	
		if (!is_null($member->name)) {$member->name = strip_tags(trim($member->name)); }
		if (!is_null($member->mail)) {$member->mail = strtolower(strip_tags(trim($member->mail))); }
		if (!is_null($member->url)) {$member->url = ($member->url === false) ? false : strip_tags(trim($member->url)); }
		if (!is_null($member->country)) {$member->country = strip_tags(trim($member->country)); }
		if (!is_null($member->custom)) {$member->custom = strip_tags(trim($member->custom)); }
		if (isset($member->extra['comment'])) { $member->extra['comment'] = strip_tags(trim($member->extra['comment'])); }
		if (isset($member->extra['rules'])) { $member->extra['rules'] = strip_tags(trim($member->extra['rules'])); }
	}
	
	// ** PRIVATE METHOD **
	// Updates the last checked date of the fanlisting.
	function LastChecked() {
		$this->sql->query('UPDATE ' . $this->table_name . '_settings SET value = UNIX_TIMESTAMP(NOW()) WHERE setting = \'last_checked\'');
	}
	
	// ** PRIVATE METHOD **
	// Gets version of current object. This is not the phpFanList version.
	// Can be used to check capabilities.
	function GetVersion() {
		return '1.0';
	}
}

class Member {
// Check with is_null for properties and isset for extras
	var $id = NULL;
	var $tempid = NULL;	// Not a member yet, or update
	var $name = NULL;
	var $country = NULL;
	var $mail = NULL;
	var $url = NULL;
	var $custom = NULL;
	var $dateadd = NULL;
	var $showmail = NULL;	// boolean number
	var $extra = array();

	function GetVersion() {
		return '1.0.';
	}
}

if (!function_exists('is_empty')) {
	function is_empty ($variable) {
		return (!isset($variable) || is_null($variable) || ($variable == NULL));  //#! Needs to be NULL?  #########
	}
}

if (!function_exists('inicap')) {
	function inicap($name) {
		$parts = explode("-", $name);
		if (count($parts) == 1) {
			return ucwords(strtolower($name));
		} else {
			$newname = "";
			foreach($parts as $part) { $newname .= ucwords($part) . "-"; }
			return substr($newname, 0, strlen($newname) - 1);
		}
	}
}
?>